#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
استخراج الكوكيز من Brave Browser وحفظها بصيغة Netscape
"""
import sqlite3
import os
from pathlib import Path
from datetime import datetime, timedelta
import shutil


def find_brave_cookies_db():
    """البحث عن ملف الكوكيز في Brave"""
    # مسارات Brave المحتملة
    possible_paths = [
        Path(os.environ.get('LOCALAPPDATA', '')) / 'BraveSoftware' / 'Brave-Browser' / 'User Data' / 'Default' / 'Network' / 'Cookies',
        Path(os.environ.get('LOCALAPPDATA', '')) / 'BraveSoftware' / 'Brave-Browser' / 'User Data' / 'Default' / 'Cookies',
        Path(os.environ.get('APPDATA', '')) / 'brave' / 'User Data' / 'Default' / 'Cookies',
    ]
    
    for path in possible_paths:
        if path.exists():
            print(f"✓ تم العثور على ملف الكوكيز: {path}")
            return path
    
    print("❌ لم يتم العثور على ملف كوكيز Brave")
    return None


def extract_amazon_cookies(cookies_db_path, output_file='secrets/cookies.txt'):
    """
    استخراج كوكيز Amazon من قاعدة بيانات Brave
    
    Args:
        cookies_db_path: مسار ملف Cookies في Brave
        output_file: مسار ملف الحفظ
    """
    try:
        # إنشاء نسخة مؤقتة (لأن الملف قد يكون مقفل)
        temp_db = Path('temp_cookies.db')
        shutil.copy2(cookies_db_path, temp_db)
        
        # الاتصال بقاعدة البيانات
        conn = sqlite3.connect(str(temp_db))
        cursor = conn.cursor()
        
        # التحقق من أعمدة الجدول
        cursor.execute("PRAGMA table_info(cookies)")
        columns = [col[1] for col in cursor.fetchall()]
        print(f"   الأعمدة المتاحة: {', '.join(columns)}")
        
        # استخراج كوكيز Amazon - نستخدم الأعمدة الموجودة فعلياً
        # Chrome/Brave تستخدم: is_secure بدلاً من secure
        if 'is_secure' in columns:
            secure_col = 'is_secure'
        elif 'secure' in columns:
            secure_col = 'secure'
        else:
            secure_col = '0 as is_secure'
        
        query = f"""
        SELECT host_key, path, {secure_col}, expires_utc, name, value
        FROM cookies
        WHERE host_key LIKE '%amazon%'
        ORDER BY host_key, name
        """
        
        cursor.execute(query)
        cookies = cursor.fetchall()
        
        if not cookies:
            print("❌ لم يتم العثور على أي كوكيز من Amazon (جميع النطاقات)")
            print("   تأكد من أنك سجلت دخول على https://www.amazon.com/ أو amazon.sa")
            conn.close()
            temp_db.unlink()
            return False
        
        # عرض النطاقات الموجودة
        domains = set(cookie[0] for cookie in cookies)
        print(f"\n✓ تم العثور على {len(cookies)} كوكي من {len(domains)} نطاقات Amazon:")
        for domain in sorted(domains):
            count = sum(1 for c in cookies if c[0] == domain)
            print(f"   • {domain} ({count} cookies)")
        
        # إنشاء مجلد secrets إن لم يكن موجود
        output_path = Path(output_file)
        output_path.parent.mkdir(exist_ok=True)
        
        # كتابة الكوكيز بصيغة Netscape
        with open(output_path, 'w', encoding='utf-8') as f:
            # Header
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file was generated by extract_cookies.py\n")
            f.write(f"# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("#\n")
            f.write("# Format: domain\tflag\tpath\tsecure\texpiration\tname\tvalue\n\n")
            
            # كتابة كل كوكي
            for host_key, path, secure, expires_utc, name, value in cookies:
                # تحويل الوقت من Chrome format (microseconds since 1601) إلى Unix timestamp
                if expires_utc > 0:
                    # Chrome uses microseconds since 1601-01-01
                    chrome_epoch = datetime(1601, 1, 1)
                    unix_epoch = datetime(1970, 1, 1)
                    delta = (unix_epoch - chrome_epoch).total_seconds()
                    expiration = int((expires_utc / 1000000) - delta)
                else:
                    # Session cookie (no expiration)
                    expiration = 0
                
                # تنسيق السطر بصيغة Netscape
                flag = 'TRUE' if host_key.startswith('.') else 'FALSE'
                secure_flag = 'TRUE' if secure else 'FALSE'
                
                f.write(f"{host_key}\t{flag}\t{path}\t{secure_flag}\t{expiration}\t{name}\t{value}\n")
        
        # إغلاق الاتصال وحذف الملف المؤقت
        conn.close()
        temp_db.unlink()
        
        print(f"\n✅ تم حفظ الكوكيز في: {output_path}")
        print(f"   عدد الكوكيز: {len(cookies)}")
        
        # عرض أهم الكوكيز
        print("\n📋 الكوكيز المهمة المستخرجة:")
        important_cookies = ['session-id', 'session-id-time', 'ubid-main', 'at-main', 'sess-at-main', 'x-main']
        for cookie in cookies:
            name = cookie[4]
            if name in important_cookies:
                print(f"   ✓ {name}")
        
        return True
        
    except sqlite3.Error as e:
        print(f"❌ خطأ في قاعدة البيانات: {e}")
        return False
    except Exception as e:
        print(f"❌ خطأ: {e}")
        return False


def verify_cookies(cookies_file='secrets/cookies.txt'):
    """التحقق من صحة ملف الكوكيز"""
    try:
        path = Path(cookies_file)
        if not path.exists():
            print(f"❌ الملف غير موجود: {cookies_file}")
            return False
        
        with open(path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        cookie_count = sum(1 for line in lines if line.strip() and not line.startswith('#'))
        
        print(f"\n🔍 التحقق من الملف:")
        print(f"   المسار: {path.absolute()}")
        print(f"   عدد الكوكيز: {cookie_count}")
        
        if cookie_count > 0:
            print(f"   ✅ الملف صالح!")
            
            # عرض أول 3 أسطر (بدون القيم الحساسة)
            print(f"\n📄 عينة من الملف:")
            actual_cookies = [line for line in lines if line.strip() and not line.startswith('#')]
            for i, line in enumerate(actual_cookies[:3]):
                parts = line.strip().split('\t')
                if len(parts) >= 6:
                    print(f"   {i+1}. Cookie: {parts[5]} (من {parts[0]})")
            
            if len(actual_cookies) > 3:
                print(f"   ... و {len(actual_cookies) - 3} كوكيز أخرى")
            
            return True
        else:
            print(f"   ❌ الملف فارغ!")
            return False
        
    except Exception as e:
        print(f"❌ خطأ في التحقق: {e}")
        return False


def main():
    print("="*70)
    print("  🍪 استخراج كوكيز Amazon من Brave Browser")
    print("="*70)
    print()
    
    # 1. البحث عن ملف الكوكيز
    print("📂 البحث عن ملف كوكيز Brave...")
    cookies_db = find_brave_cookies_db()
    
    if not cookies_db:
        print("\n❌ فشل: لم يتم العثور على Brave Browser")
        print("\n💡 تأكد من:")
        print("   1. تثبيت Brave Browser")
        print("   2. تسجيل الدخول على https://www.amazon.com/")
        print("   3. إغلاق Brave Browser قبل تشغيل هذا السكريبت")
        return
    
    print()
    
    # 2. استخراج الكوكيز
    print("📥 استخراج كوكيز Amazon...")
    success = extract_amazon_cookies(cookies_db, output_file='secrets/cookies.txt')
    
    if not success:
        print("\n❌ فشل استخراج الكوكيز")
        return
    
    print()
    
    # 3. التحقق من الملف
    print("="*70)
    verify_cookies('secrets/cookies.txt')
    
    print()
    print("="*70)
    print("  ✅ تم الانتهاء بنجاح!")
    print("="*70)
    print()
    print("📌 الخطوات التالية:")
    print("   1. الملف جاهز في: secrets/cookies.txt")
    print("   2. يمكنك الآن اختبار جلب الأغلفة:")
    print("      python test_amazon_cover.py")
    print()


if __name__ == '__main__':
    main()
